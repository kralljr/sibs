SIBS: R is the Future!
========================================================
author: Jenna Krall
date: Friday, July 17, 2015


```{r knitr_options, echo = F, message = F, warning = F}
# Load packages
library(knitr)
library(dplyr)
library(pander)
library(htmlTable)
library(ggplot2)
library(ReporteRs)
library(mvtnorm)
library(plot3D)

# Set global options for echo, eval
opts_chunk$set(echo = T, eval = T, message = F, warning = F, fig.align = "center",  tidy = F)


echo1 <- F

# Set directory for this file (only necessary if you want code to run somewhere other than where the file is located)
opts_knit$set(root.dir = "~/Documents/repos/sibs")
```




Topics
========================================================

1. Reproducible research
2. Conditional formatting 
3. R in 3-d
4. Shiny



Reproducible research
========================================================

What is reproducible research?

``...the calculation of quantitative scientific results by independent scientists using the original datasets and methods''

What do we need?

- Reproducibility = Tools + Workflow (Stodden, Leisch, and Peng)
- Literate statistical programming (Rossini via Knuth):
  - programming language + documentation language
- We need to link **data, code, results, and interpretation**





Introduction to knitr
=======================================================

knitr

- Developed by Yihui Xie at Iowa State (now at RStudio)
- Integration with RStudio

This talk will focus on using knitr to integrate R and markdown, but knitr is actually a flexible tool that can be used in broader ways.

- We write text (in markdown) separated by code chunks (written in R)
- In our output, we include code (or not) and results (relevant tables and figures)
- knitr ties together our code and our final report





This presentation is reproducible!
========================================================

**ALL** slides for this presentation have been created using rmarkdown, knitr, and RStudio.  This means that if R changes, if the dataset changes, if you want to see how I created the slides, *the code and output and interpretation is all there*.



Example 1: how did we make this plot?
========================================================

```{r, echo = echo1}
plot(dist ~ speed, data = cars, ylab = "Stopping distance (ft)", xlab = "Speed (mph)")
```


Example 1: how did we make this plot?
========================================================

```{r, echo = !echo1}
plot(dist ~ speed, data = cars, ylab = "Stopping distance (ft)", xlab = "Speed (mph)")
```



Example 2: how did we compute those statistics?
========================================================
What dataset are they from?  If I don't know R, how can I make this table?

```{r, results="verbatim", echo = echo1}
summary(cars)
```



Example 2: how did we compute those statistics?
========================================================
What dataset are they from?  If I don't know R, how can I make this table?

```{r, results="verbatim", echo = !echo1}
summary(cars)
```




How to create Rmd files
========================================================

**Creating the document**


- Open RStudio and select `file-> new file -> R markdown`
- Give the document a title (title of the document, not the file) and author
- Specify the output (html, pdf, word).  



Output files
========================================================  

Rstudio with knitr allows your document to be output as:

1. html
2. pdf
3. word document


How to use knitr
========================================================



**Filling in the content**

- Write some text using markdown, e.g. ``I am doing an analysis of the iris dataset in R.''
- Add code in ``code chunks''
  - Start with three backticks and a bracketed \{r\}
  - End with three backticks 


When you are finished, click the knit button to create your dynamic document!




Code chunk options and names
========================================================


**Code chunk names**
- Code chunks can be named within the bracket: {r codechunk1} or {r jennascodechunk}
- Useful to indicate what the code chunk does
- Can help with debugging documents
- Can make it easier to navigate a long document


  
  
  
Code chunk options and names
========================================================

You can specify code chunk options like arguments to an R function

- Code chunk options are specified after a comma following `r` in the code chunk.
- Useful code chunk options:
  - eval: TRUE or FALSE indicating whether you want R to run the code. 
  - echo: TRUE or FALSE indicating whether the final document should show the code
  - e.g. \{r codechunk1, echo = T, eval = F\}


  
Figures in knitr
========================================================  
  
  
We can include figures in `knitr` using the same commands we have seen earlier.

- You can control the output with code chunk options out.width and out.height, which specify the height and width of the chunk in pixels (for html file)

```{r dataclean, verbatim = T, echo = F}
g1 <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) + geom_point() + ggtitle("Temperature vs. Ozone") + xlab("Temperature") + ylab("Ozone")
```

```{r, out.width = 100, out.height = 100}
g1
```



  
Figures in knitr
========================================================  
 
```{r}
g1
```

Tables in knitr
========================================================  

```{r, echo = F}
gaq <- group_by(airquality, Month)
table1 <- summarise_each(gaq, funs(mean(., na.rm = T)), Ozone : Temp)
```

```{r}
print(table1)
```



Tables in knitr
========================================================  

Convenient and easy to use knitr to make tables by using the `kable` function

```{r, echo = T}
kable(table1)
```



Tables in knitr
========================================================  

We can also use the arguments of kable to change the digits
```{r}
kable(table1, digits = 2)
```

There are other extensions, including changing the alignment and adding captions





In-line code
========================================================

You can put code in the lines of your text by using backtick-r-space "the code you want" backtick

As an example, here is my code chunk that defines date:
```{r, verbatim = T}
date <- Sys.Date()
```

Now I can do inline code specifying the day: Today is `r date`.  Now, when I rerun the code on a different day, this will update.
Include code that you don't want to run inside two backticks, e.g. today, I covered the `kable` function.


Example 3: Writing interpretations.
========================================================

The R dataset *cars* has `r ncol(cars)` variables which have the labels `r colnames(cars)[1]` and `r colnames(cars)[2]`.  The dataset has `r nrow(cars)` observations.  The average speed reported was `r mean(cars$speed)` miles per hour with a standard deviation (sd) of `r sd(cars$speed)`.  The average stopping distance was `r mean(cars$dist)` (sd = `r sd(cars$dist)`) feet.  




Example 3: Writing interpretations.
========================================================

**Suppose the data set is restricted to distances less than 100**

The R dataset *cars* has `r ncol(cars)` variables which have the labels `r colnames(cars)[1]` and `r colnames(cars)[2]`.  The dataset has `r nrow(cars)` observations.  The average speed reported was `r mean(cars$speed)` miles per hour with a standard deviation (sd) of `r sd(cars$speed)`.  The average stopping distance was `r mean(cars$dist)` (sd = `r sd(cars$dist)`) feet.  






R presentations using knitr
========================================================

We can create R presentations using knitr


**Creating the presentation**

- Open RStudio and select `file-> new file -> R presentation`
- Save the file
- Title followed by string of equal signs indicates a new slide
- Can use markdown and introduce code chunks as in an R Markdown document

Great for teaching!




Conditional formatting
============================
**Example in html using htmlTable**

- Uses html formatting
- Can control row/column shading
- Updated 4/21/15
- Does **not** work with MS word 


Conditional formatting
============================

**Dataset: my fitbit data since January**

```{r echo = T}
load("shiny_fitbit/krall_fitbit.RData")
fitbit_tab <- tail(daily)
fitbit_tab
```

Conditional formatting
============================
**Row shading**
```{r, results = "asis", echo = F}

# Get alternating row color shading
cols <- rep(c("white", "grey90"), length = nrow(fitbit_tab))
# Get html table
h1 <- htmlTable(fitbit_tab, col.rgroup = cols)
h1
```






Conditional formatting
============================
**Add more formatting**
```{r, echo = F}
# Define text colors for each cell
cols2 <- matrix(rep(c("color: #FF00FF;", "color: #6666FF;"), length = nrow(fitbit_tab) * ncol(fitbit_tab)), ncol =ncol(fitbit_tab), byrow = F)
h1 <- htmlTable(fitbit_tab, css.cell = cols2)
h1
```


Conditional formatting
============================
```{r, echo = F}
h1 <- htmlTable(fitbit_tab, cgroup = c("name", "results"), n.cgroup = c(1, 3), align.cgroup = "c", align = c("c", "l", "l"), col.columns = c("grey", "white", "white", "red"), caption = "Table 1. Jenna's fitbit data", pos.caption = "top")
h1



```


Conditional formatting
============================

**Example in rmarkdown using pander**

- Useful for pandoc/markdown documents
- Only useful for bold/italicized formatting
- Can be converted to MS word
- Updated 5/18/15


Conditional formatting
============================
**Example in Word using ReporteRs**

- Does not work with `knitr`
- Creates MS word file
- Adds objects to file, including formatted tables

Conditional formatting
============================
```{r, echo = T}
# Create table
fitbit1 <- FlexTable(fitbit_tab)
# Modify cell properties
fitbit1[seq(2, nrow(fitbit_tab), by = 2), ] <- cellProperties(background.color = "grey")

# Define output filename
doc.filename = "example_table.docx"
# Define docx
doc = docx( )
# Add table
doc = addFlexTable( doc, fitbit1 )
# Write file
writeDoc( doc, file = doc.filename )
```



3-d plots
============================

```{r, echo = F}
x <- seq(-3, 3, by = 0.1)
y <- x
xy <- expand.grid(x, y)
z <- dmvnorm(expand.grid(x, y))

scatter3D(xy[, 1], xy[, 2], z)
```

3-d plots
============================
**Example from plot3D package**
```{r, echo = F}
 par(mfrow = c(1, 1))
 
# surface = volcano
 M <- mesh(1:nrow(volcano), 1:ncol(volcano))

# 100 points above volcano 
 N  <- 100
 xs <- runif(N) * 87
 ys <- runif(N) * 61
 zs <- runif(N)*50 + 154
  
# scatter + surface
 scatter3D(xs, ys, zs, ticktype = "detailed", pch = 16, 
   bty = "f", xlim = c(1, 87), ylim = c(1,61), zlim = c(94, 215), 
   surf = list(x = M$x, y = M$y, z = volcano,  
               NAcol = "grey", shade = 0.1))
```

Shiny
============================

Interactive data exploration is useful for

1. Exploratory data analysis
2. Allowing collaborators to visualize their data
3. Teaching statistical concepts

Two main parts:

1. `server.R`
2. `ui.R`



Shiny
============================

How to run

1. Create `server.R` and `ui.R` files
2. Set working directory to folder containing `server.R` and `ui.R`
3. Load shiny `library(shiny)`
4. Type `runApp()`